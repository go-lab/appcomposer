"""Added Bundles and Messages tables as well as new relationships

Revision ID: 2d3d6675101a
Revises: 182eb89ec642
Create Date: 2014-11-19 16:54:49.694432

"""

# revision identifiers, used by Alembic.
import json
import traceback
from sqlalchemy import text

revision = '2d3d6675101a'
down_revision = '182eb89ec642'

from alembic import op
import sqlalchemy as sa


def upgrade():
    # ## commands auto generated by Alembic - please adjust! ###
    op.create_table('Bundles',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('lang', sa.Unicode(length=15), nullable=True),
                    sa.Column('target', sa.Unicode(length=30), nullable=True),
                    sa.Column('app_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['app_id'], ['Apps.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Messages',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('key', sa.Unicode(length=250), index = True),
                    sa.Column('value', sa.Text(), nullable=True),
                    sa.Column('bundle_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['bundle_id'], ['Bundles.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    ### end Alembic commands ###
    metadata = sa.MetaData()
    messages_table = sa.Table('Messages', metadata,
        sa.Column('key', sa.Unicode(250)),
        sa.Column('value', sa.Text()),
        sa.Column('bundle_id', sa.Integer()),
    )


    # To migrate we need to extract the data from the bundles of translator apps and to
    # create the Message and Bundle objects.
    connection = op.get_bind()
    approws = connection.execute("SELECT * FROM Apps WHERE composer='translate'")
    for pos, approw in enumerate(approws):
        if pos % 10 == 0 and pos > 0:
            print "    %s..." % pos
        continue
        try:
            data = json.loads(approw["data"])
            app_id = approw["id"]

            bundles = data["bundles"]
            for bundle in data["bundles"]:
                l, terr, group = bundle.split("_")
                messages = data["bundles"][bundle]["messages"]

                # Create the new Bundle object.
                lang = "%s_%s" % (l, terr)

                result = connection.execute(text("INSERT INTO Bundles (lang, target, app_id) VALUES (:lang, :target, :app_id)"), lang=lang,
                                            target=group, app_id=app_id)
                bundle_id = result.lastrowid


                # For each message in the bundle, create a Message object and link it to the bundle we just created.
                for key, value in messages.items():
                    insertion = messages_table.insert().values(key = key, value = value, bundle_id = bundle_id)
                    op.execute(insertion)
#                     result = connection.execute(text(u"INSERT INTO Messages (`key`, `value`, bundle_id) VALUES (:key, :value, :bundle_id)"),
#                                                 key=key, value=value, bundle_id=bundle_id)

            # Delete the bundles.
            del data["bundles"]

            # Save the changes.
            datastr = json.dumps(data)
            result = connection.execute(text(u"UPDATE Apps SET `data` = :data WHERE id = :app_id"), data=datastr, app_id=app_id)

        except:
            traceback.print_exc()
            print "Exception on an app: %r" % approw["id"]
            raise

            # TODO: Remove dependencies on data urls.
    print "[done]"


def downgrade():
    # ## commands auto generated by Alembic - please adjust! ###
    op.drop_table('Messages')
    op.drop_table('Bundles')
    ### end Alembic commands ###
